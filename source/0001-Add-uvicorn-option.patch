From 3022cbc92536f17840cf19213323924a49a6b2ff Mon Sep 17 00:00:00 2001
From: Janrupf <business.janrupf@gmail.com>
Date: Tue, 2 Apr 2024 21:02:37 +0200
Subject: [PATCH 1/3] Add uvicorn option

---
 modules/cmd_args.py |   1 +
 webui.py            | 136 +++++++++++++++++++++++++++++++++++---------
 2 files changed, 111 insertions(+), 26 deletions(-)

diff --git a/modules/cmd_args.py b/modules/cmd_args.py
index 016a33d1..113992ad 100644
--- a/modules/cmd_args.py
+++ b/modules/cmd_args.py
@@ -125,3 +125,4 @@ parser.add_argument("--skip-load-model-at-start", action='store_true', help="if
 parser.add_argument("--unix-filenames-sanitization", action='store_true', help="allow any symbols except '/' in filenames. May conflict with your browser and file system")
 parser.add_argument("--filenames-max-length", type=int, default=128, help='maximal length of filenames of saved images. If you override it, it can conflict with your file system')
 parser.add_argument("--no-prompt-history", action='store_true', help="disable read prompt from last generation feature; settings this argument will not create '--data_path/params.txt' file")
+parser.add_argument("--uvicorn", action='store_true', help="Sidestep gradio and run directly as a Uvicorn application (this enables running on unix domain sockets via --server-name unix:/path/to/socket and an existing fd via --server-name fd:1)")
diff --git a/webui.py b/webui.py
index 2c417168..0223f535 100644
--- a/webui.py
+++ b/webui.py
@@ -14,6 +14,58 @@ initialize.imports()
 
 initialize.check_versions()
 
+def parse_uvicorn_listen_address():
+    from modules.shared_cmd_options import cmd_opts
+
+    UDS_PREFIX = "unix:"
+    FD_PREFIX = "fd:"
+
+    host = initialize_util.gradio_server_name() or "127.0.0.1"
+    uds = None
+    fd = None
+
+    if host.startswith(UDS_PREFIX):
+        # UDS mode
+        uds = host[len(UDS_PREFIX):]
+        host = None
+    elif host.startswith(FD_PREFIX):
+        # FD mode
+        fd = int(host[len(FD_PREFIX)])
+        host = None
+
+    return host, uds, fd
+
+def start_uvicorn(app, host, uds, fd, port=None, nonblock=True):
+    from modules.shared_cmd_options import cmd_opts
+    from gradio.networking import INITIAL_PORT_VALUE, Server as GradioServer
+    import uvicorn
+
+    print("Starting directly with uvicorn")
+
+    config = uvicorn.Config(
+        app,
+        host=host,
+        uds=uds,
+        fd=fd,
+        port=port or INITIAL_PORT_VALUE,
+        log_level="debug" if cmd_opts.gradio_debug else "warning",
+        ssl_keyfile=cmd_opts.tls_keyfile,
+        ssl_certfile=cmd_opts.tls_certfile,
+    )
+    server = GradioServer(config) if nonblock else uvicorn.Server(config)
+
+    if nonblock:
+        if cmd_opts.gradio_debug:
+            print("Waiting for uvicorn to start...")
+
+        server.run_in_thread()
+
+        if cmd_opts.gradio_debug:
+            print("Uvicorn running!")
+
+        return server
+    else:
+        server.run()
 
 def create_api(app):
     from modules.api.api import Api
@@ -38,12 +90,18 @@ def api_only():
     script_callbacks.app_started_callback(None, app)
 
     print(f"Startup time: {startup_timer.summary()}.")
-    api.launch(
-        server_name=initialize_util.gradio_server_name(),
-        port=cmd_opts.port if cmd_opts.port else 7861,
-        root_path=f"/{cmd_opts.subpath}" if cmd_opts.subpath else ""
-    )
 
+    if cmd_opts.uvicorn:
+        host, uds, fd = parse_uvicorn_listen_address()
+
+        api.app.include_router(api.router)
+        start_uvicorn(api.app, host, uds, fd, port=cmd_opts.port or 7861, nonblock=False)
+    else:
+        api.launch(
+            server_name=initialize_util.gradio_server_name(),
+            port=cmd_opts.port if cmd_opts.port else 7861,
+            root_path=f"/{cmd_opts.subpath}" if cmd_opts.subpath else ""
+        )
 
 def webui():
     from modules.shared_cmd_options import cmd_opts
@@ -64,9 +122,6 @@ def webui():
         shared.demo = ui.create_ui()
         startup_timer.record("create ui")
 
-        if not cmd_opts.no_gradio_queue:
-            shared.demo.queue(64)
-
         gradio_auth_creds = list(initialize_util.get_gradio_auth_creds()) or None
 
         auto_launch_browser = False
@@ -76,24 +131,53 @@ def webui():
             elif shared.opts.auto_launch_browser == "Local":
                 auto_launch_browser = not cmd_opts.webui_is_non_local
 
-        app, local_url, share_url = shared.demo.launch(
-            share=cmd_opts.share,
-            server_name=initialize_util.gradio_server_name(),
-            server_port=cmd_opts.port,
-            ssl_keyfile=cmd_opts.tls_keyfile,
-            ssl_certfile=cmd_opts.tls_certfile,
-            ssl_verify=cmd_opts.disable_tls_verify,
-            debug=cmd_opts.gradio_debug,
-            auth=gradio_auth_creds,
-            inbrowser=auto_launch_browser,
-            prevent_thread_lock=True,
-            allowed_paths=cmd_opts.gradio_allowed_path,
-            app_kwargs={
-                "docs_url": "/docs",
-                "redoc_url": "/redoc",
-            },
-            root_path=f"/{cmd_opts.subpath}" if cmd_opts.subpath else "",
-        )
+        app_args = {
+            "docs_url": "/docs",
+            "redoc_url": "/redoc",
+        }
+
+        if cmd_opts.uvicorn:
+            # Manually run as a Uivcorn app
+            import gradio as gr
+            from gradio.routes import App
+
+            host, uds, fd = parse_uvicorn_listen_address()
+
+            if uds is not None and not cmd_opts.no_gradio_queue:
+                print("Running on Unix domain socket, queue will not be enabled! (pass --no-gradio-queue to supress this warning)")
+            elif not cmd_opts.no_gradio_queue:
+                shared.demo.queue(64)
+
+            shared.demo.allowed_paths = cmd_opts.gradio_allowed_path
+            shared.demo.auth = gradio_auth_creds
+            shared.demo.share = cmd_opts.share
+            shared.demo.root_path = f"/{cmd_opts.subpath}" if cmd_opts.subpath else ""
+            shared.demo.ssl_verify = cmd_opts.disable_tls_verify
+
+            app = App.create_app(shared.demo, app_kwargs=app_args)
+            shared.demo.server = start_uvicorn(app, host, uds, fd)
+
+            if auto_launch_browser:
+                print("Automatically launching the browser is not supported in Uvicorn mode!")
+        else:
+            if not cmd_opts.no_gradio_queue:
+                shared.demo.queue(64)
+
+            app, local_url, share_url = shared.demo.launch(
+                share=cmd_opts.share,
+                server_name=initialize_util.gradio_server_name(),
+                server_port=cmd_opts.port,
+                ssl_keyfile=cmd_opts.tls_keyfile,
+                ssl_certfile=cmd_opts.tls_certfile,
+                ssl_verify=cmd_opts.disable_tls_verify,
+                debug=cmd_opts.gradio_debug,
+                auth=gradio_auth_creds,
+                inbrowser=auto_launch_browser,
+                prevent_thread_lock=True,
+                allowed_paths=cmd_opts.gradio_allowed_path,
+                app_kwargs=app_args,
+                root_path=f"/{cmd_opts.subpath}" if cmd_opts.subpath else "",
+            )
 
         startup_timer.record("gradio launch")
 
-- 
2.44.0

