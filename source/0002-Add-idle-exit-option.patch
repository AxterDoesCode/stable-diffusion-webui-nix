From 23c30bc9990024d41db2aafd455088e895b0439f Mon Sep 17 00:00:00 2001
From: Janrupf <business.janrupf@gmail.com>
Date: Tue, 2 Apr 2024 21:03:27 +0200
Subject: [PATCH 2/3] Add idle exit option

---
 modules/cmd_args.py        |  1 +
 modules/initialize_util.py | 36 +++++++++++++++++++++++++++++++++++-
 webui.py                   |  2 +-
 3 files changed, 37 insertions(+), 2 deletions(-)

diff --git a/modules/cmd_args.py b/modules/cmd_args.py
index 113992ad..e7772e2a 100644
--- a/modules/cmd_args.py
+++ b/modules/cmd_args.py
@@ -126,3 +126,4 @@ parser.add_argument("--unix-filenames-sanitization", action='store_true', help="
 parser.add_argument("--filenames-max-length", type=int, default=128, help='maximal length of filenames of saved images. If you override it, it can conflict with your file system')
 parser.add_argument("--no-prompt-history", action='store_true', help="disable read prompt from last generation feature; settings this argument will not create '--data_path/params.txt' file")
 parser.add_argument("--uvicorn", action='store_true', help="Sidestep gradio and run directly as a Uvicorn application (this enables running on unix domain sockets via --server-name unix:/path/to/socket and an existing fd via --server-name fd:1)")
+parser.add_argument("--idle-timeout", type=float, help="Automatically stop the Web UI after no requests have been made for the specified amount of seconds", default=None)
diff --git a/modules/initialize_util.py b/modules/initialize_util.py
index 79a72cb3..bea20870 100644
--- a/modules/initialize_util.py
+++ b/modules/initialize_util.py
@@ -189,11 +189,45 @@ def configure_opts_onchange():
     startup_timer.record("opts onchange")
 
 
-def setup_middleware(app):
+def setup_middleware(shared, app):
     from starlette.middleware.gzip import GZipMiddleware
+    from starlette.middleware.base import BaseHTTPMiddleware
+    from modules.shared_cmd_options import cmd_opts
+    from threading import Timer
+
+    class IdleExitMiddleware(BaseHTTPMiddleware):
+        def __init__(
+            self,
+            app,
+            timeout
+        ):
+            super().__init__(app)
+            self.timeout = timeout
+            self.timer = None
+
+        async def dispatch(self, request, call_next):
+            self._start_timeout()
+            return await call_next(request)
+
+        def _start_timeout(self):
+            if self.timer is not None:
+                self.timer.cancel()
+
+            self.timer = Timer(self.timeout, self._timeout_expired)
+            self.timer.start()
+
+        def _timeout_expired(self):
+            self.timer.cancel()
+            print("Reached idle timeout")
+            shared.state.server_command = "stop"
+
 
     app.middleware_stack = None  # reset current middleware to allow modifying user provided list
     app.add_middleware(GZipMiddleware, minimum_size=1000)
+
+    if cmd_opts.idle_timeout is not None:
+        app.add_middleware(IdleExitMiddleware, timeout=cmd_opts.idle_timeout)
+
     configure_cors_middleware(app)
     app.build_middleware_stack()  # rebuild middleware stack on-the-fly
 
diff --git a/webui.py b/webui.py
index 0223f535..2a6bee22 100644
--- a/webui.py
+++ b/webui.py
@@ -187,7 +187,7 @@ def webui():
         # running its code. We disable this here. Suggested by RyotaK.
         app.user_middleware = [x for x in app.user_middleware if x.cls.__name__ != 'CORSMiddleware']
 
-        initialize_util.setup_middleware(app)
+        initialize_util.setup_middleware(shared, app)
 
         progress.setup_progress_api(app)
         ui.setup_ui_api(app)
-- 
2.44.0

